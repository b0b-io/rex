name: Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Release (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: amd64
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            arch: arm64
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            arch: amd64
            os: macos-latest
          - target: aarch64-apple-darwin
            arch: arm64
            os: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install Just
        uses: extractions/setup-just@v2

      - name: Cache cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        id: cache-arm64-tools
        uses: actions/cache@v4
        with:
          path: /usr/lib/gcc/aarch64-linux-gnu
          key: ${{ runner.os }}-aarch64-tools-gcc

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu' && steps.cache-arm64-tools.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation linker (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Build release binary
        run: just build-release ${{ matrix.target }}
